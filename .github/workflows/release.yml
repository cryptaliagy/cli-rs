name: release

on:
  # Uncomment to enable automatic deployment on push to master
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - "src/**"
  #     - "build.rs"
  workflow_dispatch:

env:
  binary_name: cli-rs
  target: x86_64-unknown-linux-musl

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Collect version from file
        run: echo "version=$(cat VERSION).${{ github.run_number }}" >> $GITHUB_ENV

      - name: Install rust tool chain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ env.target }}

      - name: Install required tools
        run: sudo apt update && sudo apt install musl-tools -y

      - name: Lint the code
        run: cargo clippy

      - name: Run the security audit check
        run: cargo audit

      - name: Run the tests with the static target for the debug build
        run: cargo test --target ${{ env.target }}

      - name: Set the crate version
        run: cargo install cargo-edit --bin cargo-set-version && cargo set-version ${{ env.version }}

      - name: Build the final binaries
        run: |
          cargo build --release --target ${{ env.target }}  \
            && mkdir release \
            && mv ./target/${{ env.target }}/release/${{ env.binary_name }} ./release \
            && mv ./target/man/${{ env.binary_name }}.1 ./release

      # - name: Publish the crate
      #   run: cargo publish --allow-dirty
      #   env:
      #     CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish the final binary as a release
        run: |
          gh release create --latest \
            -n "Latest version of ${{ env.binary_name }}, compiled for target ${{ env.target }}" \
            -t " ${{ env.binary_name }} v${{ env.version}}" \
            ${{ env.version }} \
            ./release/*
        env:
          GH_TOKEN: ${{ github.token }}
